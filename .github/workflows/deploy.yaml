name: Spring Boot CI/CD to AWS EC2

on:
  push:
    branches:
      - dev

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/siruchat-app

  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ec2-user
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

  PROJECT_DIR_ON_EC2: /home/${{ secrets.EC2_USER }} # compose.yaml이 있는 폴더

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Spring Boot application with Gradle
        run: ./gradlew bootJar

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code (to access Dockerfile for build context on EC2)
        uses: actions/checkout@v4 # Dockerfile과 빌드 결과(JAR)를 EC2에 복사하기 위함

      - name: Deploy with Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "Moving to project directory on EC2 where compose.yaml exists..."
            cd ${{ env.PROJECT_DIR_ON_EC2 }}

            echo "Log in to Docker Hub..."
            docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            echo "Copying application source/build context to EC2..."
            # GitHub Actions runner의 빌드된 프로젝트 파일을 EC2로 동기화
            # compose.yaml이 있는 디렉토리에 Dockerfile과 build/libs 폴더가 있어야 합니다.
            rsync -avz --exclude '.git' --exclude 'node_modules' --exclude '.gradle' "$GITHUB_WORKSPACE/" "${{ env.PROJECT_DIR_ON_EC2 }}/"

            echo "Stopping existing containers defined in compose.yaml..."
            # 기존 컨테이너를 안전하게 중지 및 삭제
            docker-compose -f compose.yaml down || true

            echo "Starting containers with Docker Compose..."
            # docker-compose.yaml에 필요한 환경 변수들을 전달
            DOCKER_USERNAME=${{ env.DOCKER_USERNAME }} \
            DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }} \
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
            MYSQL_USERNAME=${{ secrets.MYSQL_USER }} \
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }} \
            RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }} \
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            MONGO_USERNAME=${{ secrets.MONGO_USERNAME }} \
            MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            MONGO_DB=${{ secrets.MONGO_DB }} \
            JWT_SECRET=${{ secrets.JWT_SECRET }} \
            docker-compose -f compose.yaml up -d --build siruchat # siruchat 서비스만 재빌드
            echo "Deployment complete."