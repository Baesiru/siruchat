name: Spring Boot CI/CD to AWS EC2

on:
  push:
    branches:
      - dev

env:
  # Docker Hub 레포지토리 정보 (본인의 Docker Hub 사용자 이름과 프로젝트 이름으로 변경)
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/siruchat-app

  # EC2 접속 정보 (GitHub Secrets에서 가져옴)
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ec2-user # AWS Linux/UNIX 기본 사용자
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

  APP_PORT: 8080
  HOST_PORT: 80

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Spring Boot application with Gradle
        run: ./gradlew bootJar

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} # 커밋 SHA를 태그로 사용
          # 최신 버전 태그도 추가하고 싶다면:
          # tags: |
          #   ${{ env.DOCKER_IMAGE_NAME }}:latest
          #   ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-push 작업이 성공적으로 완료된 후 실행
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "Pulling latest Docker image..."
            docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

            echo "Stopping existing container..."
            docker stop siruchat-container || true # 컨테이너 이름은 원하는 대로 설정
            docker rm siruchat-container || true   # 컨테이너 삭제

            echo "Running new container with environment variables..."
            # Spring Boot 애플리케이션에 필요한 환경 변수들을 -e 옵션으로 전달
            docker run -d \
              --name siruchat-container \
              -p ${{ env.HOST_PORT }}:${{ env.APP_PORT }} \
              -e MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
              -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
              -e MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }} \
              -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }} \
              -e RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }} \
              -e RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }} \
              -e RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -e REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
              -e MONGO_USERNAME=${{ secrets.MONGO_USERNAME }} \
              -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
              -e MONGO_HOST=${{ secrets.MONGO_HOST }} \
              -e MONGO_DB=${{ secrets.MONGO_DB }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

            echo "Deployment complete."